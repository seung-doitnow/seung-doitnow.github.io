---
layout: posts
title:  "2023.08.22 화요일"
date:   2023-08-22 21:00:00 +0900
categories: TIL
---
---
# 프로그래머스 - Lv.1: 최대공약수와 최소공배수
두 자연수를 입력받고, 최대공약수와 최소공배수를 구해서 반환하는 간단한 문제였다.
``` javascript
function solution(n, m) {
    let min;
    let max;
    if (n < m) {
        min = n;
        max = m;
    } else {
        min = n;
        max = m;
    }

    let G;
    for (let i = min; 0 < i; i--) {
        if (min % i == 0 && max % i == 0) {
            G = i;
            break;
        }
    }

    let L;
    for (let i = max; i < 1000000; i++) {
        if (i % min == 0 && i % max == 0) {
            L = i;
            break;
        }
    }

    return [G, L];
}
```
그리 어렵지 않게 풀었다. 일단, 두 자연수 중에서 작은 값과 큰 값을 구해주었다. 그 이유는 최대공약수와 최소공배수를 구할 때 연산을 조금이라도 적게하기 위함이었는데, 두 자연수의 최대공약수는 두 수 중 작은값보다 클 수 없고, 최소공배수는 큰 수보다 작을 수 없기 때문이었다. 그렇게 작은 값과 큰 값을 나누고, 단순하게 1씩 증가시키거나 감소시키면서 조건을 부합하는지 체크하였다.

문제를 해결하고, 최대공약수 및 최소공배수를 구하는 특별한 공식이 있는지 찾아보던 중 유클리드 호제법을 발견했고, 최대공약수를 이용해 최소공배수를 구하는 간단한 공식을 알게되었다. 아래는 그 이후에 다시 풀어본 코드이다.
``` javascript
function solution(n, m) {
    let num;
    let gcd;
    if (n < m) {
        num = m;
        gcd = n;
    } else {
        num = n;
        gcd = m;
    }
    
    while (num % gcd !== 0) {
        let remainder = num % gcd;
        num = gcd;
        gcd = remainder;
    }
    
    return [gcd, n * m / gcd];
}
```
유클리드 호제법은 두 수를 서로 번갈아가면서 나누어 최대공약수를 구하는 방법이다. 간단히 설명해보자면, 큰 수를 작은 수로 나눈다. 나눈 후의 나머지로 작은 수를 나눈다. 앞의 과정을 반복하다보면 딱 나누어지는 때가 있는데, 그 때의 나누는 수가 최대공약수이다. 최소공배수는 두 수를 곱하고, 구해놓은 최대공약수로 나누면 된다.