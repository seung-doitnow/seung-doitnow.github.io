---
layout: posts
title:  "2023.09.08 금요일"
date:   2023-09-08 21:00:00 +0900
categories: TIL
---
---
# 아키텍처 패턴
아키텍처 패턴이란, 소프트웨어의 구조를 정의하고 그에 맞는 설계 원칙과 가이드라인을 제시하는 템플릿을 말한다. 많이 검증된 아키텍처 패턴을 적용하여 개발을 진행하면 효율적인 프로그램을 만들 수 있다.
## 종류
아래 나열한 아키텍처 패턴 외에도 많은 아키텍처 패턴이 있다. 아키텍처 패턴들은 각각 장단점이 다 다른데, 프로그래머는 작성하려는 프로그램의 특성을 잘 파악하고 맞는 아키텍처 패턴을 적용할 줄 알아야 한다.
### MVC 패턴 (Model View Controller Pattern)
사용자 인터페이스(UI)가 필요한 어플리케이션에서 많이 사용되는 아키텍처 패턴이다. 비즈니스 로직 및 데이터 처리를 담당하는 모델, 사용자 인터페이스(UI)를 담당하는 뷰, 클라이언트의 요청을 모델과 뷰로 전달해주는 컨트롤러로 나누어져 있다.
### 클린 아키텍처 패턴 (Clean Architecture Pattern)
서비스를 의존성을 가진 여러 계층으로 분리하여 처리하는 패턴이다. 이 때, 핵심 비지니스 로직이 수행되는 계층은 외부와 분리하여야 하고, 잘 분리되었다면 유닛 테스트 및 통합 테스트를 용이하게 할 수 있게 된다.
### 마이크로 서비스 아키텍처 패턴 (Microservices Architecture Pattern)
시스템을 작게 여러개의 독립적인 서비스로 분리하는 패턴이다. 이렇게 독립된 서비스는 각각 따로 배포 및 확장, 관리되기 때문에 개발 및 배포가 빠르다는 장점이 있다.

# 계층형 아키텍처 패턴 (Layered Architecture Pattern)
계층형 아키텍처 패턴이란, 시스템을 여러 계층으로 분리하여 관리하는 아키텍처 패턴이다. 이 패턴의 핵심은 각 계층이 바로 아래 계층에만 의존하게 만들고, 높은 응집도를 가지면서 다른 계층과의 결합도는 최소화되게끔 계층화하는 것이다.
## 3계층 아키텍처 패턴 (3-Layered Architecture Pattern)
계층형 아키텍처 패턴 중 서비스의 규모가 작은 편이라 3개의 계층으로 나누는 패턴을 말한다. 주로, 프레젠테이션 계층, 비즈니스 로직 계층, 데이터 액세스 계층으로 나누어 설계한다.
### 컨트롤러 (Controller)
프레젠테이션 계층에 해당하며, 클라이언트의 요청을 수신하고 이에 맞는 결과를 반환해주는 역할을 한다.
### 서비스 (Service)
실제 비즈니스 로직이 수행되는 부분으로, 가장 핵심적인 작업이 이루어지는 계층이다.
### 저장소 (Repository)
가장 낮은 계층으로, 데이터베이스와 직접 상호작용하는 계층이다.