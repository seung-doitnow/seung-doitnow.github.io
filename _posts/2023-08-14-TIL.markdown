---
layout: posts
title:  "2023.08.14 월요일"
date:   2023-08-14 21:00:00 +0900
categories: TIL
---
---
# JavaScript
웹을 더욱 동적으로 변화시키기 위해 만들어진 언어로, 1995년 브렌던 아이크가 개발하였다.
이후 AJAX와 jQuery의 등장을 기점으로 폭발적으로 성장했으며, Node.js의 등장으로 서버 사이드 언어로써도 사용하게 되었다.
이렇게 지속적으로 발전해온 자바스크립트는 현재 웹 개발의 필수 언어 중 하나로 자리매김 하였다.

## 데이터 타입

### 원시형

#### string
단일 문자 및 문자열을 나타대는 자료형이다.
##### 표기법
1. ''
2. ""
3. ``

#### number
정수, 소수 등 숫자를 나타내는 자료형이다.
##### 종류
1. 정수
2. 실수
3. 지수
4. NaN (Not a Number)
5. Infinity
6. -Infinity

#### bigint
number가 표현할 수 있는 2^53 - 1보다 큰 정수를 표현할 때 쓰는 자료형이다.

#### boolean
참(true), 거짓(false) 둘 중 하나의 값만 가질 수 있는 자료형이다.

#### undefined
변수 선언만 이루어지고 값이 할당되지 않았을 때 해당 변수가 가지고 있는 자료형이다.

#### symbol
현 시점에서는 있다고 알아만 두자. 조만간 정복한다...!

#### null
값이 존재하지 않음을 나타내는 자료형으로, undefined와는 다르다.

### 객체
원시 자료형보다 더 복잡하고 다양한 값을 담고 표현할 수 있는 자료형이다.

## 변수

### 키워드

#### var
1. 함수 스코프 혹은 전역 스코프를 가진다.
2. 중복 선언이 가능한데, 첫 번째 이외의 선언은 작동하지 않으며 에러도 발생하지 않는다.
3. 호이스팅 현상으로 인해 의도치 않은 결과를 가져올 수 있다.
4. 모듈을 사용하지 않을 때, 전역 객체의 프로퍼티가 된다.

#### let
1. 블록 스코프를 가진다.
2. 선언만 할 수도, 동시에 값을 할당할 수도 있다.
3. 재할당이 가능하다.
4. 일시적 사각지대로 호이스팅 문제를 해결했다.

#### const
1. 블록 스코프를 가진다.
2. 선언과 동시에 값을 할당해야 한다.
3. 재할당이 불가능하다.
4. 한 번 값을 할당받은 후로 값이 변하면 안되는 변수나, 가독성을 위해 특정 값을 네이밍 할 때 사용한다.
5. 일시적 사각지대로 호이스팅 문제를 해결했다.

## 연산자

### 산술 연산자

#### +
더하기 연산을 한다.
특이사항으로 이항 연산 시, 피연산자 중 하나라도 문자열이 있으면 문자열끼리 합치는 연산을 한다. 단항 연산 시에는 다른 산술 연산과 마찬가지로 문자열을 숫자로 바꾼다.

#### - * / %
순서대로 빼기, 곱하기, 나눗셈의 몫, 나눗셈의 나머지 연산을 한다.

#### **
거듭제곱 연산이다.

### 할당 연산자

#### =
변수에 값을 할당할 때 사용한다.

#### += -= *= /= %=
5개 모두 변수의 값에 각각 산술 연산을 한 후 값을 할당한다.

### 비교 연산자

#### ==
필요하면 형변환이 일어난 뒤, 값이 같으면 true를 반환하는 연산자이다.

#### ===
값 뿐 아니라 타입도 일치해야 true를 반환하는 연산자이다.

#### !=
필요하면 형변환이 일어난 뒤, 값이 다르면 true를 반환하는 연산자이다.

#### !==
값 뿐 아니라 타입도 다른 경우만 true를 반환하는 연산자이다.

#### < > <= >=
4개 모두 크기를 비교할 때 사용하는 연산자이다.

### 논리 연산자

#### &&
두 값 모두 true인 경우에만 true를 반환한다.

#### ||
두 값 모두 false인 경우를 제외하고 모두 true를 반환한다.

#### !
피연산자가 boolean 타입이 아닌 경우, 암시적 형 변환이 일어난 후 그 값의 반대값을 반환한다. boolean 타입인 경우도 반대값을 반환한다.

### 삼항 연산자
(조건식) ? (참일 때의 값) : (거짓일 때의 값)의 형태로 쓰이는 연산자이다.

### typeof 연산자
typeof (피연산자)의 형태로 쓰이며, 피연산자의 자료형을 반환한다.

## 함수

### 함수 선언
function (매개 변수) {구문}의 형태로 선언한다. 매개 변수 유무, 리턴값 유무를 사용자가 필요에 맞게 작성할 수 있다. 다만, 리턴값을 작성하지 않아도 실제로 undefined를 반환한다.

### 함수 표현식
= funtion (매개 변수) {구문};의 형태로 사용할 수 있는데, 값처럼 쓰인다. 따라서, 변수에 함수를 담고 필요할 때 재사용 할 수 있다.

### 화살표 함수
(매개 변수) => 구문의 형태나 (매개 변수) => {구문}의 형태로 쓰인다. 매개 변수의 개수에 따라 ()를 빼고 변수명 => 구문의 형태로 사용하기도 한다. 한 줄인 함수나, 코드 길이를 줄여야 할 때 유용한 함수 작성 방법이다.

## 조건문

### if / else if / else
if (조건식) {참일 때 실행할 구문} 형식으로 쓰인다. else {구문}를 추가로 작성하여 조건식에 따라 두 분기로 나뉘는 코드를 작성할 수도 있다. 또한, else if (조건식) {참일 때 실행할 구문}을 추가로 작성하여 분기를 더욱 다양하게 나눌 수도 있다.

### switch
switch (변수) {케이스 정의} 형식으로 쓰인다. 주로 boolean이 아닌 자료형의 값에 따라 여러 분기를 나누어야 할 때 사용한다. 다양한 케이스를 작성할 수 있고, break라는 구문으로 다양한 케이스들의 분기를 합치거나 분리할 수 있다.

## 반복문

### for
for (변수 선언; 조건식; 증감식;) {}의 형태로 많이 사용한다. 주로 반복 횟수를 명확히 알 수 있을 때, 진입 시 생성한 변수의 값을 배열의 인덱스 값으로 활용할 때 많이 사용되는 반복문이다. 물론 변수 선언과 증감식은 생략할 수 있다.

### for in
for (변수 선언 in 순회 대상) {}의 형태로 사용한다. 순회 순서를 보장받을 수 없기 때문에 순서가 중요하지 않을 때 쓰면 된다.

### for of
for (변수 선언 of 순회 대상) {}의 형태로 사용한다. for in과 다르게 순회 순서를 보장받을 수 있다.

### while
while (조건식)의 형태로 많이 쓰인다.

### do while
while이랑 똑같으나, 조건식 비교를 구문 실행 후 하기 때문에 무조건 한 번은 실행된다. 형태는 do {구문} while (조건식) 이렇게 많이 쓰인다.

## 객체
키워드 객체명 = {객체 값들} 이런식으로 쓰이는데, 객체 값은 key값: 값의 형태로 작성하여야 한다. 접근자 .을 사용하여 객체가 가지고 있는 속성 값을 활용할 수 있다.