---
layout: posts
title:  "2023.08.18 금요일"
date:   2023-08-18 21:00:00 +0900
categories: TIL
---
---
# 콜백함수
다른 함수의 매개변수로 전달된 함수를 콜백함수라고 한다. 매개변수로 함수를 전달한다는 것은 실행 시점을 결정할 제어권을 넘긴다는 것인데, 이를 활용해 비동기적 프로그래밍을 할 수 있다.
## 동기와 비동기
특정 작업을 마치고 난 후에 다음 작업으로 넘어가는 방식을 동기적으로 작동한다고 말한다. 즉, 위에서 아래로 순차적으로 작업이 실행되는 것을 말한다. 보통 프로그래밍 언어가 이 방식으로 작동한다. 하지만, 동기 방식으로는 현실의 문제 및 해결 방식을 효율적으로 담아낼 수 없다. 어떤 작업을 시작하면, 그 작업이 끝날 때까지 다른 작업을 하지 못하기 때문이다. 이 때문에, 비동기적으로 작동하는 코드 역시 필요하다. 그리고, 이 비동기적 프로그래밍을 위해 쓰이는 방법 중 하나가 콜백함수를 활용하는 것이다.
## 콜백지옥
비동기적 방식이 마냥 좋은 것은 아니다. 동기적 방식에서는 실행 흐름을 제어하기 쉬웠지만, 비동기적 방식에서는 이 실행 흐름을 제어하기가 어렵다. 그래서, 이 실행 흐름을 보장하기 위해 함수 안에 함수를 많이 넣게 된다. 콜백지옥은 이로 인해 생기는 문제로, 유지보수를 어렵게 만든다. javascript에서는 이를 해결하기 위한 문법이 계속 업데이트 되고 있다.
### Promise
매개변수로 넘어온 콜백함수가 즉시 실행되고, 그 내부에서 조건을 만족한 후 reslove() 혹은 reject()를 실행시켜주어야 다음 then() 혹은 catch()로 넘어간다.
``` javascript
new Promise(function (resolve, reject) {
    // 성공 시
    resolve();
    // 실패 시
    reject();
}).then(...)
```
### Generator
iterator를 활용한 문법이다. 함수에 *를 붙여 선언할 수 있다. 호출 시 iterator를 반환하고, 그 iterator가 가진 next()를 호출하면 해당하는 yield 문을 실행한 후 다음 yield에서 멈춘다.
``` javascript
*function () {
    yield function1();
    yield function2();
    yield function3();
    ...
}
```
### async, await
Promise를 활용한 문법이다. 함수 앞에 async 키워드를 추가해 선언할 수 있다. await의 대상이 된 함수가 Promise()를 반환할 때까지 기다리고, 반환이 되면 그 다음 함수로 넘어간다. 따라서, 반드시 Promise()를 반환하는 함수를 await의 대상으로 사용하여야 한다.
``` javascript
async function () {
    await function1(return Promise());
    await function2(return Promise());
    await function3(return Promise());
    ...
}
```