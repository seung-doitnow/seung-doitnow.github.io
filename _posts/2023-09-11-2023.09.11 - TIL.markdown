---
layout: posts
title:  "2023.09.11 월요일"
date:   2023-09-11 21:00:00 +0900
categories: TIL
---
---
# NestJS
NestJS는 Node.js 런타임에서 작동하는 백엔드 웹 프레임워크이다. 잘 구조화된 아키텍처, 이를 받쳐주는 강력한 CLI 기능, express 및 fastify의 주요 기능들을 그대로 사용할 수 있다는 점 덕분에 대세 프레임워크로 떠오르고 있다.
## express의 단점
express는 특유의 간결함과 유연성으로 계속 사랑받아 왔고, 현재 Node.js의 백엔드 웹 프레임워크 중에 가장 많은 인기를 자랑한다. 하지만, javascript가 서버 사이드 언어로써 점점 발전하다 보니 오히려 그 간결함과 유연성이 단점으로 지목받기 시작했고, 개발자들은 Angular 및 React 같은 더욱 더 생산성 좋은 프레임워크의 필요성을 느끼게 되었다.
## NestJS의 장점
### 1. 구조화된 아키텍처
- NestJS는 서버의 구조를 거시적인 관점에서 Module, Controller, Provider 세 가지로 나누어 본다. Provider는 기능을 수행하고, Controller는 클라이언트와 통신을 주고 받고, 이 둘을 조합해서 Module을 구성한다. 이렇게 구성된 각각의 Module은 독립적으로 작동하고, 효율적인 유지보수를 가능하게 해준다.
### 2. 강력한 CLI
- 앞서 말했던 구조화를 바탕으로, 불필요한 코드 작성을 줄여주는 자동화를 지원한다. Controller, Provider 등을 만들어 주는 것은 물론 DTO, Entity를 포함한 Module 단위까지 생성할 수 있다. 이는 코드 작성에 들어갈 시간을 로직 구현에 쏟을 수 있게 해주고, 결국 생산성을 향상시키는 결과를 가져다 주었다.
### 3. express 및 fastify 공식 지원
- NestJS는 완전 독립적인 프레임워크가 아니고, express 혹은 fastify를 기반으로 작동한다. 따라서, 자주 사용하던 req, res 등의 객체를 포함해 ClassValidator, cookie-parser 등의 유명한 모듈 역시 그대로 사용할 수 있다. 이는 친숙함을 가져다주어 기존 백엔드 개발자가 느끼는 진입 장벽을 낮춰주었으며, 기존 프로젝트들의 NestJS로의 이식성을 좋게 만드는 결과를 가져다 주었다.