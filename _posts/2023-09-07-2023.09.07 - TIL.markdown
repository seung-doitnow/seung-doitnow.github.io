---
layout: posts
title:  "2023.09.07 목요일"
date:   2023-09-07 21:00:00 +0900
categories: TIL
---
---
# 객체 지향 프로그래밍
객체 지향 프로그래밍이란, 프로그램을 객체 단위로 구분하여 해석하는 프로그래밍 패러다임을 말한다. 여기서 객체는 현실에 존재하는 사물을 말하는데, 이 객체는 각각 상태(데이터 및 필드)와 기능(행동 및 메소드)을 가지고 있다. 객체 지향 프로그래밍은 이러한 객체들의 상호작용으로 작동하는 프로그램을 만드는 것이라고 보면 된다.
## 객체 지향 프로그래밍 특징
### 캡슐화 (Encapsulation)
객체의 상태와 기능을 하나의 단위로 묶는 것을 말한다. 주로 class로 구현되며, class는 각각 본인에게 맞는 필드(상태)와 메소드(기능)를 가진다.
### 상속 (Inheritance)
특정 객체를 기반으로, 그 객체의 상태 및 기능을 그대로 물려받는 새로운 객체를 선언할 수 있는데 이 때 이 둘을 상속 관계에 있다고 한다. 상속은 코드의 재사용성을 높여주고, 계층 구조를 만들어 프로그램의 구조 파악에 도움을 준다.
### 추상화 (Abstraction)
여러 클래스의 공통된 부분을 파악하고, 이를 새롭게 정의하는 것을 말한다. 추상화로 만든 추상 클래스를 통해 불필요한 코드를 줄일 수 있고, 복잡한 코드를 간결하게 만들 수 있다. 또한, 인터페이스도 사용하면 구현을 강제하여 일관성도 강제시킬 수 있다.
### 다형성 (Polymorphism)
같은 이름을 가진 메소드나 연산자가 객체의 역할에 따라 다르게 동작할 수 있음을 의미한다. 대표적으로 메소드 오버로드 및 오버라이딩이 있다.
## SOLID 원칙
객체 지향 프로그래밍으로 설계가 용이하고 유지보수 및 확장이 용이한 프로그램을 만들기 위해 지켜야 하는 원칙을 말한다.
### 단일 책임 원칙 (Single Responsibility Principle)
하나의 객체는 하나의 역할만을 수행해야 한다는 원칙이다. 단순하지만 위반하기 가장 쉬운 원칙이다.
### 개방-폐쇄 원칙 (Open-Closed Principle)
확장에는 개방되어 있으나, 변경에는 폐쇄되어야 한다는 원칙이다. 즉, 기능을 확장할 때 기존 코드를 변경하는 쪽으로 작성되지 않도록 클래스를 설계해야 한다는 말이다.
### 리스코프 치환 원칙 (Liskov Substitution Principle)
상속 관계에 있는 클래스에서, 부모 클래스의 자리를 자식 클래스가 대체해도 문제가 없도록 설계해야 한다는 말이다. 즉, 자식 클래스는 부모 클래스의 기능을 그대로 유지하면서 기능을 확장하도록 설계해야 한다.
### 인터페이스 분리 원칙 (Interface Segregation Principle)
클래스가 불필요한 인터페이스의 기능을 구현하지 않아야 한다는 말이다. 따라서, 인터페이스는 최대한 작은 단위 메소드를 가지게 설계해야 한다.
### 의존성 역전 원칙 (Dependency Inversion Principle)
하위 계층의 모델이 높은 계층의 모델에게 의존해야지 그 반대가 되어서는 안된다는 원칙이다. 여기서 높은 계층은 추상화된 계층을 말하고, 하위 계층은 그 추상화를 바탕으로 세부적으로 구현된 계층을 말한다.