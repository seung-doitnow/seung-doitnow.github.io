---
layout: posts
title:  "2023.09.06 수요일"
date:   2023-09-06 21:00:00 +0900
categories: TIL
---
---
# 트랜잭션 (Transaction)
트랜잭션은 여러 작업 단위를 묶어 그룹화하여 실행하는 방법으로, 데이터베이스의 일관성을 보장하기 위해 사용되는 방법이다.
## ACID
트랜잭션이 가지는 특징 4가지의 앞글자를 따서 만든 단어이다. 해당 특징이 엄격하게 보장되는 트랜잭션일수록, 데이터베이스의 일관성을 잘 보장할 수 있다.
### 원자성 (Atomicity)
트랜잭션으로 묶인 작업들은 일관되게 성공하거나 실패해야 한다는 것을 말한다.
### 일관성 (Consistency)
트랜잭션의 작업이 오류로 인해 실패하더라도, 데이터는 일관성을 보장해야 한다는 것을 말한다. 즉, 중간에 작업을 실패하면 작업 시작 전 상태로 롤백시킬 수 있어야 한다는 것을 말한다.
### 격리성 (Isolation)
트랜잭션이 실행되는 중에 데이터가 변경되는 것을 방지할 수 있어야 함을 말한다. 이는 동시성에서 오는 문제로, 격리 수준을 필요에 맞게 설정하여 해결할 수 있다.
### 지속성 (Durability)
작업이 완료된 데이터가 반드시 데이터베이스에 영구적으로 저장되어야 함을 의미한다. 이는, 작업을 성공적으로 수행한 후 커밋하기 전 비정상적으로 종료 되어도 로그 등의 백업 파일을 바탕으로 결과를 반영할 수 있어야 함을 말한다.

# 락 (Lock)
동시성에서 오는 자원 공유로 인한 문제를 해결하기 위한 방법이다. 한 트랜잭션이 사용하고 있는 데이터는 다른 트랜잭션이 접근하지 못하게 하는 방법이다. 이 때, 데이터에 락을 걸었다고 표현한다.
## 종류
### 공유 락 및 읽기 락
데이터 읽기는 허용하고, 수정만 금지하는 락이다.
### 배타 락 및 쓰기 락
데이터를 읽거나 수정 전부 금지하는 락이다.
## 락킹 수준
### 글로벌 락 혹은 데이터베이스 락
모든 테이블에 락을 건다. 가장 높은 수준의 락이며, 범위도 가장 크다.
### 테이블 락
해당 테이블에만 락을 건다.
### 네임드 락
특정한 문자열에만 락을 건다.
### 메타데이터 락
동일한 행 및 동일한 객체에 락을 건다.
## 교착 상태
락 설정을 잘못 하는 경우 교착 상태가 될 수 있어 주의해야 한다. 교착 상태란 서로 다른 두 트랜잭션이 서로 후순위에 있는 작업물에 락을 걸어 무한히 대기하게 되는 상태를 말한다.
## 격리 수준
### READ UNCOMMITTED
커밋 되지 않은 읽기를 허용한다. 가장 낮은 격리 수준으로, 일관성이 깨지기 쉽다.
### READ COMMITTED
커밋된 읽기만 허용한다.
### REPEATABLE READ
트랜잭션이 끝날 때까지 락을 유지한다. 다만, 데이터 삽입은 발생할 수 있어 이미 죽은 데이터에 접근하는 팬텀 읽기가 발생할 수 있다.
### SERIALIZABLE
해당 데이터와 관련된 모든 작업을 금지한다. 읽기, 수정, 삭제, 삽입 등 모든 작업은 트랜잭션이 끝난 후에만 이루어질 수 있다.