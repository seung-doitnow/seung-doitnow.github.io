---
layout: posts
title:  "2023.08.15 화요일"
date:   2023-08-15 21:00:00 +0900
categories: TIL
---
---
# ES6
자바스크립트는 표준화를 위해 ECMA-262 기술 규격을 따르고 있는데, 이 ECMA-262는 지속적으로 버전을 업데이트하며 다양한 문법과 기능을 추가하거나 변경하고 있다. 그 중 2015년에 발표된 버전을 ES6이라고 지칭하는데, 대규모의 문법적 향상 및 변경이 있었기 때문에 개발자들 사이에서 자주 언급된다.

## ES6에서 추가된 다양한 문법

### let, const
변수 키워드로 쓸 수 있으며, 블록 범위를 가지는 스코프와 호이스팅 방지 등 var 키워드의 단점을 대폭 보완해서 나왔기 때문에 많이 쓰이고 있다.

### 화살표 함수
함수 표현식보다 더욱 단순하고 간결하게 함수를 만들 수 있는 문법이다.
``` javascript
// 표현식이 한 줄인 경우
let func = (arg1, arg2, ...argN) => expression

// 매개변수가 한 개인 경우 () 생략 가능
let func = arg1 => expression

// 표현식이 여러 줄인 경우
let func = (arg1, arg2, ...argN) => {
    expression
}
```

### 구조 분해 할당
배열이나 객체가 가지고 있는 데이터 중 일부만 필요할 때, 이를 편리하게 변수에 담을 수 있게 해주는 문법이다.

``` javascript
// 간단한 예시 (배열)
let data = [data1, data2, data3];
let [firstData, secondData, thirdData] = data;

console.log(firstData); // data1
console.log(secondData); // data2
console.log(thirdData); // data3

// 간단한 예시 (객체)
let object = {
    name: '이승일',
    age: 26,
    state: 'studying'
};
let {name, age, state} = object;

console.log(name); // 이승일
console.log(age); // 26
console.log(state); // studying
```
#### 특징
1. 분해(나누기)만 하지 파괴(값 수정 혹은 제거)하지 않는다.
2. 쉼표를 사용하여 몇몇 데이터를 생략할 수 있다.
3. 할당 연산자 우측에는 반복 가능한 개체라면 무엇이든 올 수 있다. 즉, 객체의 프로퍼티도 올 수 있다.
4. 할당 받는 엔티티의 요소 개수와 분해하려는 엔티티의 요소 개수가 다르면 undefined가 할당 된다.
5. 요소 개수가 다를 때 할당되는 undefined 대신 할당 될 기본값을 설정해 줄 수 있다.
6. 분해하려는 엔티티의 구성 요소가 남을 때, ...variable을 사용해 나머지 요소를 가져올 수 있다.
7. 함수의 매개 변수에 객체를 전달하면, 알아서 구조 분해하여 필요한 곳에 사용한다. 당연히, 미포함된 데이터의 기본값도 설정해 줄 수 있다.

### 단축 속성명
객체의 키 값에 변수를 할당할 때, 키 값과 변수명이 같다면 할당 연산자를 생략할 수 있게 해주는 문법이다.
``` javascript
let name = '이승일';
let age = 26;

let me = {
    name,
    age
}

console.log(me); // {name: '이승일', age: 26}
```

### 전개 구문
배열이나 객체를 전개할 수 있는 문법이다. 구조 분해 할당과 함께 많이 사용된다.
``` javascript
let numbers = [1, 2, 3];
let newNumbers = [...number, 4];

console.log(newNumbers); // [1, 2, 3, 4]
```

### 나머지 매개변수
함수를 정의할 때 정해놓은 매개변수 외의 값들을 배열로 저장해주는 기능이다.
``` javascript
function listing(num1, num2, num3, ...nums) {
    console.log(...nums);
}

listing(...[1, 2, 3, 4, 5]); // 4 5

// 이런식으로 응용할 수 있다.
function sum(...integers) {
    let sum = 0;
    for (let integer of integers) {
        sum += integer;
    }

    return sum;
}

console.log(sum(...[1, 2, 3, 4, 5]));
console.log(sum(...[1, 2, 3, 4, 5, 6, 7]));
```

### 템플릿 리터럴
여러 줄로 된 문자열에 변수 보간기능을 사용할 수 있게 해주는 문법이다.
``` javascript
let me = {
    name: '이승일',
    age: 26
};

let message = `안녕하세요! 제 이름은 ${me.name}입니다.
나이는 ${me.age}살입니다. 앞으로 잘 부탁드립니다!`;

console.log(message);

// 안녕하세요! 제 이름은 이승일입니다.
// 나이는 26살입니다. 앞으로 잘 부탁드립니다!
```

## 일급 객체로서의 함수
일급 객체란 다른 객체들에 일반적으로 적용 가능한 연산을 모두 지원하는 객체를 말하는데 자바스크립트의 함수가 이에 해당한다. 따라서, 다양한 활용도를 가지고 있다.
### 특징
1. 변수에게 할당될 수 있다.
2. 함수의 매개변수로 전달될 수 있다.
3. 함수의 반환값으로 쓰일 수 있다.
4. 객체의 프로퍼티로 할당할 수 있다.
5. 배열의 요소로 할당할 수 있다.

## Map
배열과 객체로는 현실 세계를 반영하는데 한계가 있어 등장한 자료구조이다. 객체와 달리 key값으로 모든 자료형을 사용할 수 있다.
### 메소드
``` javascript
map.set(key, value) // map에 데이터 추가
map.get(key) // key에 해당하는 데이터를 반환, key가 존재하지 않으면 undefined 반환 
map.has(key) // 맵에 key가 존재하면 true, 존재하지 않으면 false 반환
map.delete(key) // key에 해당하는 데이터 삭제
map.clear() // 모든 데이터 삭제
map.keys() // 맵의 모든 key값을 가지고 있는 반복자(iterator)를 반환
map.values() // 맵의 모든 데이터를 가지고 있는 반복자(iterator)를 반환
map.entries() // 맵의 모든 key-value를 각각 묶음으로 가지고 있는 반복자(iterator)를 반환
map.size // 맵의 크기(데이터 개수)를 반환
```

## Set
맵과 마찬가지로 배열과 객체로는 현실 세계를 반영하기에 한계가 있어 등장한 자료구조이다. 데이터가 중복되지 않으며, key값과 데이터가 페어로 저장되지 않고 오직 데이터만 저장된다.
### 메소드
``` javascript
set.add(value) // set에 데이터 추가
set.has(value) // set에 데이터가 존재하면 true, 없으면 false 반환
set.delete(value) // 해당하는 데이터 삭제
set.clear() // 모든 데이터 삭제
set.values() // 셋의 모든 데이터를 가지고 있는 반복자(iterator)를 반환
```