---
layout: posts
title:  "2023.08.17 목요일"
date:   2023-08-17 21:00:00 +0900
categories: TIL
---
---
# undefined와 null
자바스크립트의 undefined와 null은 둘 다 없음을 나타내는 자료형이지만 조금의 차이가 있다. undefined는 엔진의 판단에 의해 자동으로 할당되는 값이지만 null은 프로그래머가 코드를 작성하여 직접 할당해주어야 한다는 차이가 있는데, 이 차이 때문에 null은 없음을 명시적으로 표현할 때 사용된다.
## undefined가 할당되는 예시 몇 가지
1. 변수 선언만 한 경우
2. 선언하지 않은 식별자에 접근한 경우
3. 반환값이 없는 함수의 반환값
## typeof null
typeof null을 실행시켜보면 object를 반환하는데, 이는 유명한 javascript 버그이다. 수정 시, 기존 코드들의 오류가 발생할 수 있어 수정하지 않고 있다.

# 실행 컨텍스트
코드가 실행될 때 필요한 환경 정보들을 모아놓은 객체이다. 함수가 실행될 때 생성해서 콜스택이라는 스택의 한 종류에 추가한다. 따라서, 스택에 함수가 쌓여서 실행되는 것과 똑같은 순서로 추가되고 실행되기 때문에 코드 환경 및 순서를 보장받을 수 있다.
## 활성화 됐을 때 일어나는 일
1. 식별자 수집 및 호이스팅
2. 외부 환경 정보 구성
3. this 값 설정
## 구성 방법
여러가지가 있으나 일단 함수로 구성되는 방법만 알아보자.
1. 전역공간
2. eval() 함수
3. 함수
## 구성 요소
1. VariableEnvironment
    - 식별자 정보(=record)
    - 외부 환경 정보(=outer)
    - LexicalEnvironment 선언 시점의 snapshot
2. LexicalEnvironment
    - VariableEnvironment와 동일하나, 변경사항이 실시간으로 반영
3. ThisBinding
    - this 식별자가 가르키는 객체
## VE, LE
environmentRecord, outerEnvironmentReference로 구성되어 있다.
### environmentRecord
컨텍스트가 활성화 되면 실행될 코드를 처음부터 끝까지 순회하며 식별자 정보를 수집한다. environmentRecord는 그렇게 수집된 식별자 정보를 가지고 있는데, 매개변수 및 var 변수 등이 포함된다. 그리고, 이 과정에서 호이스팅이 일어나게 된다.
### 호이스팅
인터프리터가 변수와 함수의 선언 전 메모리 공간을 미리 할당해두는 것을 말한다.
#### 특징
1. 변수는 선언 부분만 호이스팅된다. 즉, 할당만 있는 구문은 호이스팅 되지 않는다.
2. 함수 선언문은 전체가 호이스팅 된다. 따라서, 기존 함수를 덮어써 다른 결과값을 도출해 심각한 오류를 유발할 수 있으니 되도록 함수 표현식을 사용해야 한다. 함수 표현식은 변수에 함수를 할당하는 것이고, 변수는 선언 부분만 호이스팅되기 때문에 이를 막을 수 있다.
### outerEnvironmentReference
함수가 호출되어 실행되는 순간(실행 컨텍스트가 선언되는 순간)의 LE 정보를 담고 있다. 따라서, 현재 위치의 블록 범위 바깥의 변수들을 참조할 수 있다. 결국 타고 타고 올라가 전역 변수까지 탐색할 수 있게 되는데, 이를 스코프 체이닝이라고 한다.

# this
특정 개체를 가리키고 있는 식별자이다. 다른 언어에서는 클래스의 인스턴스가 스스로를 가리키는 경우지만, 자바스크립트에서는 실행 컨텍스트가 가지고 있기에 어디서나 쓰일 수 있다.
## 위치 및 상황 별 this가 가리키는 대상
1. 전역 공간 : 전역 객체(window 혹은 global)
2. 함수 내부 : 전역 객체(window 혹은 global)
3. 메소드 내부 : 호출 객체(단, 메소드여도 내부에서 함수만 호출하면 전역 객체)
4. 콜백 함수로 사용될 시 : 기본적으로 전역 객체
    - setTimeOut() : 전역 객체
    - forEach() : 전역 객체
    - addEventListner() : 이벤트가 추가될 대상 (. 앞의 객체)
5. 생성자 내부 : 할당되는 객체
## this 우회
1. 변수 활용 : 함수 실행 전 변수에 this를 할당해 사용
2. 화살표 함수 사용 : this를 바인딩 하지 않는, ES6에서 도입된 문법
## 명시적 this 바인딩
### .call
함수를 즉시 실행하며, this가 가르킬 객체를 매개변수로 전달해 줄 수 있다.
### .apply
역시 함수를 즉시 실행하며, this가 가르킬 객체를 매개변수로 전달해 줄 수 있다. 다만, 매개변수를 배열 형태로 전달해야 한다.
### .bind
마찬가지로 this가 가르킬 객체를 매개변수로 넘겨줄 수 있으며, 넘겨받은 매개변수들을 적용한 함수를 만들 수 있다. 반환값으로 넘겨주기 때문에 반드시 변수에 할당해야 한다.