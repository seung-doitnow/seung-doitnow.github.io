---
layout: posts
title:  "2023.08.23 수요일"
date:   2023-08-23 21:00:00 +0900
categories: TIL
---
---
# 프로그래머스 - Lv.1: 옹알이 (2)
문자열이 담긴 배열을 전달 받고, 그 배열 내의 문자열이 'aya', 'ye', 'woo', 'ma', 이렇게 4개의 발음을 조합해서 만들 수 있는지 카운트하는 문제였다. 다만, 같은 발음이 2번 이상 연속으로 나오는 문자열은 카운트에서 제외해야 하는 예외 조건이 있었다.
``` javascript
function solution(babbling) {
    let wordArr = ['aya', 'ye', 'woo', 'ma'];
    
    let answer = [];
    for (let i = 0; i < babbling.length; i++) {
        for (let j = 0; j < 4; j++) {
            if (babbling[i].includes(wordArr[j].repeat(2))) continue;
            
            babbling[i] = babbling[i].replaceAll(wordArr[j], '0');
        }
        
        answer.push(babbling[i]);
    }
    
    return answer.reduce((count, string) => isNaN(string) ? count : count + 1, 0);
}
```
내 풀이는 이러했다. 일단 반복문을 돌면서 할 수 있는 발음들을 replaceAll() 메소드를 활용해 0으로 바꿔주었다. 이 때, replaceAll()을 실행하기 전 같은 발음을 연속으로 하는 문자열인지 확인 후, 맞다면 다음 반복 구문으로 넘어가게 하였다. 그 다음, 필터링 되고 변환이 끝난 문자열들이 담긴 배열을 돌면서 숫자로 변환하고, isNaN() 메소드에서 true를 반환하면 카운트 해주었다. 왜 숫자로 변환이 되면 카운트 해주었냐면, 발음 가능한 문자열을 0으로 replace 해주었고, 0으로만 이루어진 문자열만 숫자로 변환했을 때 isNaN이 true가 나올 것이기 때문이었다.

문제를 해결한 후, 다른 사람들의 코드를 보다가 정규식을 알게되었다. 아래 코드는 정규식을 이용해 새로 풀이한 코드이다.
``` javascript
function solution(babbling) {
  let regexp1 = /(aya|ye|woo|ma)\1+/;
  let regexp2 = /^(aya|ye|woo|ma)+$/;

  return babbling.reduce((sum, string) => (
    !regexp1.test(string) && regexp2.test(string) ? sum + 1 : sum
  ), 0);
}
```
regexp1은 연속으로 발음하는 경우, regexp2는 각 발음으로만 이루어져 있는 경우이다. test() 메소드는 정규 표현식을 이용해 해당 문자열이 조건에 맞는지 확인 후 true 및 false를 반환한다. 따라서, 첫 조건에 ! 연산자를 한 결과가 true이며 두번째 조건도 true인 경우는 조카가 발음할 수 있는 경우이기 때문에 카운트 해 준다.