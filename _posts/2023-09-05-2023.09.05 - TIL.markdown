---
layout: posts
title:  "2023.09.05 화요일"
date:   2023-09-05 21:00:00 +0900
categories: TIL
---
---
# prisma model
prisma에서 model이란 데이터베이스에 저장될 데이터의 형태를 말한다. modle은 객체 형태로 정의하는데, 이를 데이터베이스의 언어에 맞게 변환하여 매핑해주는게 prisma의 역할이다. 관계형 데이터베이스에서는 table, mongoDB에서는 collection등에 매핑된다.
## 정의 방법
``` prisma
model User {
  userId   Int    @id @default(autoincrement())
  nickname String
  age      Int
}
```
기본적으로, model 키워드 + table 및 collection 이름 형태로 정의할 수 있다. 각 행은 필드명 + 데이터 타입 + 필드 속성 이렇게 이루어져 있다.
## model 이름 명명 규칙
공식 문서에서는 model 이름을 정의할 때 아래 규칙을 지키기를 권유하고 있는데, 프로그래밍 언어의 변수 명명 규칙과 비슷하다.
1. [A-Za-z][A-Za-z0-9_]* 정규식을 준수할 것
2. 모델 이름은 문자로 시작하고, Pascal Case를 사용할 것 (ex. PascalCase, CamelCase)
3. 모델 이름은 단수형을 사용한다.
4. 내부적으로 사용하는 예약어를 쓰지 않는다. 이는 반드시 지켜야 한다.
## 데이터 타입
각 필드의 타입을 지정해주는 것으로, prisma는 이를 참고해서 대상 데이터베이스에 맞는 데이터 타입을 매핑한다. 아래 외에도 여러 타입이 있다.
1. String
2. Int
3. DateTime
## 필드 속성
각 필드가 가질 속성을 정의한다. 아래 외에도 여러 속성이 있다.
1. @id
2. @default
3. @unique
4. @relation
## 관계 지정
기본적으로 @relation(fields: [모델 내 필드 이름], references: [참조할 모델의 필드 이름]) 형태로 다른 모델의 데이터를 참조하여 관계를 형성할 수 있다.
### one to one (일대일)
유저, 유저의 상세 정보에 대한 모델 정의 예시이다.
``` prisma
model User {
  userId   Int       @id @default(autoincrement())
  nickname String

  info     UserInfo?
}

model UserInfo {
  userInfoId Int     @id @default(autoincrement())
  name       String
  age        Int

  userId     Int
  user       User    @relation(fields: [userId], references: [userId])
}
```
prisma의 모델이 가진 필드들은 기본적으로 전부 NOT NULL이 적용된다. 하지만, ?를 뒤에 붙이면 선택적 필드로 인식하여 NOT NULL이 해제되어 NULL을 가질 수 있다.
### one to many (일대다)
유저, 해당 유저가 작성한 게시글에 대한 모델 정의 예시이다.
``` prisma
model User {
  userId   Int    @id @default(autoincrement())
  nickname String

  posts    Post[]
}

model Post {
  postId   Int    @id @default(autoincrement())
  title    String
  content  String

  authorId Int
  author   User   @relation(fields: [authorId], references: [userId])
}
```