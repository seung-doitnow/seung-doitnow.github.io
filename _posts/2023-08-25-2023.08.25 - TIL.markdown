---
layout: posts
title:  "2023.08.25 금요일"
date:   2023-08-25 21:00:00 +0900
categories: TIL
---
---
# 웹 브라우저
인터넷 브라우저라고도 하며, 사용자가 웹 서버를 탐색할 수 있게 도와주는 소프트웨어이다. 웹 서버에게 정보를 요청하고, 그 정보를 전달 받은 후 가공하여 사용자에게 표시해주는 일을 한다.
## 브라우저의 통신 방식
1. 주소창에 URL이 입력되면, 브라우저는 DNS 서버로 URL을 전달한다.
2. DNS 서버는 전달받은 URL에 해당하는 IP 주소를 브라우저에게 반환한다.
3. 브라우저는 반환받은 IP 주소로 HTTP 요청을 보낸다.
4. 웹 서버는 요청에 맞는 HTTP 응답을 브라우저에게 보낸다.
5. 웹 브라우저가 서버로부터 받은 정보를 사용자가 볼 수 있게 가공하여 표시해준다.

# 웹 서버
클라이언트의 요청을 HTTP에 맞게 처리하여 응답해주는 컴퓨터 또는 프로그램을 말한다. 즉, 웹 브라우저가 요청하는 사이트에 대한 정보를 반환해준다.
## 웹 어플리케이션 서버
웹이 발전함에 따라 점차 많은 역할을 맡게 되면서, 복잡한 로직이 추가되어야 하는 경우가 많이 생겼다. 웹 어플리케이션 서버는 주로 이런 복잡한 연산을 웹 서버와 분리할 때 사용되며, 웹 서버와 협력해 사이트 정보를 가공하고 웹 서버의 HTTP 응답을 도와준다.

# HTTP
서버와 클라이언트가 데이터를 주고 받을 방식을 정의한 통신 규악이다. 즉, 웹 서버와 웹 브라우저의 통신 방법에 대한 약속을 말한다.
## HTTPS
HTTP에서 정보를 암호화하여 주고받을 수 있는 기능이 추가된, 보안이 강화된 버전이다.

# Express.js
Express.js는 Node.js의 웹 프레임워크이다. 웹 프레임워크란, 웹 개발에 있어서 보편적으로 쓰이는 기능들을 미리 작성하여 제공해 웹 개발을 쉽고 간편하게 할 수 있도록 도와주는 도구를 말한다.

# Module 시스템
JavaScript의 코드가 적힌 파일 하나하나를 Module이라고 한다. Module은 특정 기능을 위한, 하나 이상의 클래스, 함수, 변수 등으로 이루어져 있으며, JavaScript로 만드는 어플리케이션이 커질수록 꼭 이 Module 시스템을 활용하여 코드를 분리해주어야 한다.
## Module 시스템 장점
1. 코드 베이스를 분리하여 구조적으로 관리할 수 있다.
    - 다른 언어에서 namespace를 사용하여 식별자 충돌을 방지하는 것과 유사하게 사용할 수 있고, 어플리케이션이 커지면서 기능이 많아질 때 한 파일의 코드가 너무 길어지는 것 또한 방지할 수 있다.
2. 코드를 모듈화하여 재사용성을 높일 수 있다.
    - 범용적인 기능을 작성한 모듈은 여러 프로젝트에서 공통적으로 사용될 수 있고, 이는 곧 재사용성이 높다고 볼 수 있다. 그리고, 클로저를 활용하여 특정 매개변수 값을 고정하는 식으로 더더욱 재사용성을 높일 수도 있다.
3. 캡슐화 및 은닉화를 흉내낼 수 있다.
    - 변수 및 함수의 스코프, 클로저등을 함께 활용하면 다른 객체지향 프로그래밍 언어에서의 캡슐화 및 은닉화를 흉내낼 수 있다.
## CommonJS
CJS는 CommonJS의 약자로, Node.js의 환경에서 기본적으로 사용된다. require 함수와 module.exports 키워드를 통해 동적 모듈 로딩을 할 수 있다.
## ECMA Script Module
ESM은 최신 JavaScript 환경에서 지원을 시작했으며, import, export 키워드를 사용하여 CJS와는 다르게 정적 모듈 로딩을 할 수 있다.

# API
API란, 소프트웨어 및 어플리케이션, 컴퓨터와 프로그램 등이 서로 상호작용 시 지켜야 할 약속을 말한다. 이 약속이란, 데이터의 요청 및 응답의 방식, 데이터의 형태 등을 정의해 놓은 것을 말한다.

# REST API
REST의 규칙을 따르게 설계된 API를 말한다. REST란, 로이 필딩이 정의한 네트워크 소프트웨어 아키텍쳐로 데이터 송수신에 최적화 되어 있다.
## REST 원칙을 따른 API의 구성 요소
### 자원
자원을 개별적으로 식별할 수 있어야 한다. URL 사용을 예시로 들 수 있다.
### 행위
메시지와 자원을 나타내는 메타 데이터만으로 서버의 자원을 CRUD 할 수 있어야 한다. HTTP에서는 GET, POST, PATCH, DELETE등의 메소드를 사용한다.
### 표현
네트워크 메시지는 자신을 어떻게 처리해야 하는지, 즉 어떤 타입의 정보인지에 대해 충분히 표현하여야 한다. HTTP에서는 응답코드를 통해 상태를 전달하고, Content-Type 키워드를 사용하여 데이터 타입을 알려준다.